### Wat kan ik als ik 'objects' beheers?

#### Toelichting Verdiepend niveau

Je past de volgende programmeer-concepten toe en hebt voorbeelden waaruit blijkt dat je de volgende concepten beheerst:

Voor het verdiepend niveau geldt alles wat bij het oriënterende niveau gold met de volgende extra eisen:

Je past alle genoemde programmeerconcepten toe. De focus hierbij is op leesbare (b.v. naamgeving, indentation) en onderhoudbare software programma’s (dus alleen een programma dat werkt is niet goed genoeg).

Je maakt een ontwerp (CRC, class diagram) waarin de belangrijkste functionaliteit terug te vinden is.

Je vraagt feedback van een docent met software engineeringskennis en laat zien dat je deze feedback verwerkt hebt.

Concepten/Onderwerpen:
(GEEN AFVINK-LIJST!)

1. objects / classes
1. constructors
1. encapsulation:
    + private fields
    + get/set- method en/of property
1. method/constructor overloading
1. *override ToString()*.
1. CRC / class diagram
1. Methods met (eigen) Classes als parameter of return value.
1. Classes in samenhang: *relations* (tussen classes)
    + Multiplicity.
1. Scheiding GUI en Domain.

Ook heb je de volgende vaardigheden laten zien en/of er aan gewerkt:

+ V1. Leesbaarheid / Onderhoudbaarheid
    + Coding Guidelines gevolgd?
    + commentaar in code.  
    Soms handig, maar ga geen onnodig commentaar toevoegen!
    Als een variable-, method- of class-name uitlegt nodig heeft,
    probeer dan eerst of je een betere naam kunt verzinnen.  
+ V2. Algoritmiek
+ V3. Feedback gevraagd van docent, genoteerd, verwerkt.
+ V4. Professioneel gecommuniceerd. Met name ben ik op tijd, meld ik me af bij docent als ik er een keer niet of te laat ben.  


Een "soort" checklist (niet-compleet) die kan helpen:
+ Om concepten onder de knie te krijgen en ermee te oefenen heb je een aantal 'trainingen' gedaan.
+ In de 'wedstrijd' laat je zien wat je kunt. In een wedstrijd-app, een voor de 'wedstrijd' gemaakte app(licatie), laat je zien dat je weet hoe meerdere concepten binnen een onderhoudbare app worden gebruikt. De onderstaande regels gaan over je wedstrijd-apps!
+ Om jezelf en een docent te overtuigen dat je classes kunt maken heb je minstens 10 classes gemaakt, waarvan minstens 5 binnen 1 wedstrijd-app.
+ Deze classes hebben methods, fields, properties, constructors
+ In minstens 5 classes heb je een zinvolle 'override ToString()' toegevoegd.

---

<!--
#### Info voor docenten
Hoi collega's,

Het zal je opgevallen zijn dat de klok op het einde vh startsemester aan gaat! Dit betekent dat er meestal op het einde een paar twijfelgevallen ontstaan. Schroom in dat geval niet om met een of meer van je Unit-collega's te overleggen. Het is een idee om vast samen met je Unitters vast ergens in tijd een uur(?) te plannen waarop je die twijfelgevallen bespreekt. Als het binnen de unit niet lukt laat het dan svp. weten, dan kijken we of we het over Units heen geregeld krijgen. Als er vragen zijn over de precieze leeruitkomsten of het niveau, neem dan contact met de opperhoofden op.

Zoals bekend gaat het er niet om dat ze 'vinklijstjes' afwerken maar dat ze snappen wat ze aan het doen zijn, jou hier van overtuigd hebben, en liefst een behoorlijke brok aan evidence hebben, individueel danwel proftaak. Als iemand in de proftaak een fantastisch framework gebruikt heeft en beweert dat daardoor classes overbodig geworden zijn, laat ze dat dan vooral beargumenteren (schriftelijk in het verdiepingsverslag) en laat ze een indivuele challenge maken waarin ze laten zien dat ze classes wel beheersen: misschien ben je wel overtuigd!?

Zelfde wat betreft GUI: Veel tijd aan een GUI besteden (WinForms, Asp.NET, verzin het maar...) is helemaal niet erg: áls ze tenminste ook flink wat classes, instances, ctors,... hebben gemaakt die voldoen aan onze wensen. Dat laatste draait het immers om.

Puntje op de i: Design, specifiek class diagram: ze moeten er over nagedacht hebben, hoeft niet individueel, mag in proftaak, wordt vaak achteraf gedaan (bespreek dan wat ze anders zouden doen, achteraf gezien), hoeft NIET formaal UML Class Diagram, maar wel graag consequent, het gaat erom dat ze (idealiter van te voren) nadenken over het probleem en niet spreekwoordelijk beginnen te 'debuggen met de lege file', wel hopelijk met docent besproken en feedback verwerkt!

Vraag ook naar de leercurve!

Voorbeeld: Bij een MBO Applicatie-ontwikkelaar die aangeeft dat ie alles al wist, niks nieuws heeft geleerd, kun je vertellen dat je het jammer vindt dat ie niet de kans heeft gegrepen iets nieuws te leren. Vraag vooral ook waarom niet.

Ander voorbeeld: iemand die nog nooit geprogrammeerd heeft, aangeeft dat ie pas vrij laat snapte hoe dat zat met bv. class vs. instance, of met encapsulation of constructors, maar wel een paar opdrachten laat zien en uitlegt heeft misschien wel superveel geleerd! (ook al is misschien niet alles comme-il-faut).    

succes bij de afrondingen!
-->
